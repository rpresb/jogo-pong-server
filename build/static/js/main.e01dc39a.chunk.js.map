{"version":3,"sources":["components/PlayerList.js","components/Chat.js","contexts/GameContext.js","components/Rooms.js","components/Game.js","components/Login.js","components/Pong.js","App.js","serviceWorker.js","index.js"],"names":["PlayerList","props","className","Object","keys","players","map","key","name","Chat","useState","messageToSend","setMessageToSend","useEffect","elem","document","getElementById","scrollTop","scrollHeight","messages","id","join","type","value","onChange","e","target","disabled","trim","onClick","sendMessage","socket","socketClient","process","autoConnect","GameContext","React","createContext","reducer","state","action","isConnected","payload","initialState","player","room","rooms","match","GameProvider","useReducer","dispatch","on","localStorage","getItem","emit","JSON","parse","setItem","stringify","receivedMessage","open","Provider","children","message","createRoom","leaveRoom","lastType","undefined","Rooms","useContext","score1","roomId","player1","player2","score2","Game","gameConfig","ball","sendKeyEvent","sendKey","preventDefault","addEventListener","removeEventListener","style","position","width","toString","height","x","y","fill","x1","y1","x2","y2","strokeDasharray","strokeWidth","stroke","direction","fontSize","cx","cy","r","Login","setName","onSubmit","login","placeholder","required","Pong","length","console","log","status","display","flexDirection","justifyContent","alignItems","App","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e01dc39a.chunk.js","sourcesContent":["import React from 'react';\n\nconst PlayerList = (props) => {\n \n    return (\n        <div className='list-group'>\n            <span className='list-title'>Jogadores</span>\n            {Object.keys(props.players)\n                .map((key) => (\n                    <div key={key} className='list-item'>{props.players[key].name}</div>\n                ))\n            }\n        </div>\n    );\n};\n\nexport default PlayerList;\n","import React, { useState, useEffect } from 'react';\n\nconst Chat = (props) => {\n    const [messageToSend, setMessageToSend] = useState('');\n\n    const sendMessage = () => {\n        props.sendMessage(messageToSend);\n        setMessageToSend('');\n    };\n\n    useEffect(() => {\n        const elem = document.getElementById('chat-content');\n        elem.scrollTop = elem.scrollHeight;\n    }, [props.messages]);\n\n    return (\n        <div className='chat-container'>\n            <div id='chat-content' className='chat-content'>{props.messages.join('\\n\\n')}</div>\n\n            <div className='chat-form'>\n                <input\n                    type='text'\n                    value={messageToSend}\n                    onChange={(e) => setMessageToSend(e.target.value)}\n                />\n                <button\n                    disabled={!messageToSend.trim()}\n                    className={!messageToSend.trim() ? 'disabled' : ''}\n                    onClick={sendMessage}\n                >Enviar</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React, { useReducer, useEffect } from 'react';\nimport socketClient from 'socket.io-client';\n\nconst socket = socketClient(process.env.REACT_APP_SOCKET_ADDRESS, {\n  autoConnect: false,\n});\n\nconst GameContext = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECTED':\n      return {\n        ...state,\n        isConnected: action.payload,\n      };\n    case 'RESET_STATE':\n      return { ...initialState, isConnected: state.isConnected };\n    case 'PLAYER':\n      return {\n        ...state,\n        player: action.payload,\n      };\n    case 'PLAYERS':\n      return {\n        ...state,\n        players: action.payload,\n      };\n    case 'ROOM':\n      if (state.players[action.payload]) {\n        return {\n          ...state,\n          room: state.rooms[state.players[action.payload].room],\n        };\n      }\n    case 'ROOMS':\n      return {\n        ...state,\n        rooms: action.payload,\n      };\n    case 'MATCH':\n      return {\n        ...state,\n        match: action.payload,\n      };\n    case 'ADD_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  isConnected: false,\n  player: {},\n  room: {},\n  rooms: {},\n  players: {},\n  messages: [],\n  match: {},\n};\n\nconst GameProvider = (props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      if (localStorage.getItem('player')) {\n        socket.emit('Reconnect', JSON.parse(localStorage.getItem('player')));\n      }\n\n      dispatch({ type: 'CONNECTED', payload: true });\n    });\n    socket.on('disconnect', () => {\n      dispatch({ type: 'CONNECTED', payload: false });\n    });\n    socket.on('PlayersRefresh', (players) => {\n      const player = players[socket.id];\n      if (player) {\n        localStorage.setItem('player', JSON.stringify(player));\n        dispatch({ type: 'PLAYER', payload: players[socket.id] });\n      } else {\n        dispatch({ type: 'RESET_STATE' });\n      }\n\n      dispatch({ type: 'PLAYERS', payload: players });\n    });\n    socket.on('ReceiveMessage', (receivedMessage) => {\n      dispatch({ type: 'ADD_MESSAGE', payload: receivedMessage });\n    });\n    socket.on('RoomsRefresh', (rooms) => {\n      dispatch({ type: 'ROOMS', payload: rooms });\n      dispatch({ type: 'ROOM', payload: socket.id });\n    });\n    socket.on('MatchRefresh', (match) => {\n      dispatch({ type: 'MATCH', payload: match });\n    });\n    socket.on('MatchClear', () => {\n      dispatch({ type: 'MATCH', payload: {} });\n    });\n    socket.open();\n  }, []);\n\n  return (\n    <GameContext.Provider value={state}>{props.children}</GameContext.Provider>\n  );\n};\n\nconst sendMessage = (message) => {\n  socket.emit('SendMessage', message);\n};\n\nconst createRoom = () => {\n  socket.emit('CreateRoom');\n};\n\nconst leaveRoom = () => {\n  socket.emit('LeaveRoom');\n};\n\nconst joinRoom = (roomId) => {\n  socket.emit('JoinRoom', roomId);\n};\n\nconst gameLoaded = () => {\n  socket.emit('GameLoaded');\n};\n\nconst login = (name) => {\n  socket.emit('Login', name);\n};\n\nlet lastType = undefined;\nconst sendKey = (type, key) => {\n  if (lastType === type) {\n    return;\n  }\n\n  lastType = type;\n  socket.emit('SendKey', { type, key });\n};\n\nexport {\n  GameContext,\n  GameProvider,\n  sendMessage,\n  createRoom,\n  leaveRoom,\n  joinRoom,\n  gameLoaded,\n  sendKey,\n  login,\n};\n","import React, { useContext } from 'react';\nimport { createRoom, joinRoom, leaveRoom, GameContext } from '../contexts/GameContext';\n\nconst Rooms = () => {\n    const { player, rooms, room } = useContext(GameContext);\n\n    return (\n        <div className='list-group'>\n            <span className='list-title'>\n                Salas\n                {!player.room && <button onClick={createRoom}>Criar Sala</button>}\n            </span>\n            {!player.room &&\n                Object.keys(rooms).map((key) =>\n                    <div key={`room_${key}`} className='list-item'>\n                        {rooms[key].name}\n                        {rooms[key].score1 === undefined &&\n                            <button onClick={() => joinRoom(key)} disabled={rooms[key].player1 && rooms[key].player2}>Entrar</button>\n                        }\n                        {rooms[key].score1 !== undefined && \n                            <span>{rooms[key].score1} x {rooms[key].score2}</span>\n                        }\n                    </div>\n                )\n            }\n            {player.room && room &&\n                <div>\n                    {rooms[player.room] && rooms[player.room].player1 && rooms[player.room].player2 ?\n                        <button>Iniciar Jogo</button>\n                        :\n                        <div className='list-item'>\n                            <span>{room.name}</span>\n                            <button onClick={leaveRoom}>Sair</button>\n                        </div>\n                    }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Rooms;\n\n","import React, { useEffect, useContext } from 'react';\nimport SVG, { Circle, Rect, Line } from 'react-svg-draw';\nimport { gameLoaded, GameContext, leaveRoom, sendKey } from '../contexts/GameContext';\n\nconst Game = () => {\n    const { match } = useContext(GameContext);\n    const { gameConfig, ball, message, player1, player2 } = match;\n\n    useEffect(() => {\n        gameLoaded();\n\n        const sendKeyEvent = (e) => {\n            const { key, type } = e;\n\n            switch (key) {\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    sendKey(type, key);\n                    e.preventDefault();\n                    break;\n                default:\n                    break;\n            }\n        };\n\n        document.addEventListener('keydown', sendKeyEvent);\n        document.addEventListener('keyup', sendKeyEvent);\n\n        return () => {\n            document.removeEventListener('keydown', sendKeyEvent);\n            document.removeEventListener('keyup', sendKeyEvent);\n        };\n    }, []);\n\n    return (\n        <div style={{ position: 'relative' }}>\n            <SVG width={gameConfig.width.toString()} height={gameConfig.height.toString()}>\n                <Rect\n                    x=\"0\"\n                    y=\"0\"\n                    width={gameConfig.width.toString()}\n                    height={gameConfig.height.toString()}\n                    style={{ fill: 'rgb(0, 0, 0)' }}\n                />\n                <Line\n                    x1={(gameConfig.width / 2).toString()}\n                    y1='0'\n                    x2={(gameConfig.width / 2).toString()}\n                    y2={gameConfig.height.toString()}\n                    strokeDasharray=\"5,5\"\n                    strokeWidth=\"5\"\n                    style={{ stroke: 'rgba(255, 255, 255, 0.5)' }}\n                />\n\n                <text\n                    x={(gameConfig.width / 2 - 20).toString()}\n                    y='45'\n                    style={{ direction: 'rtl', fill: 'rgba(255, 255, 255, 0.7)', fontSize: '50px' }}\n                >{match.score1}</text>\n\n                <text\n                    x={(gameConfig.width / 2 + 20).toString()}\n                    y='45'\n                    style={{ fill: 'rgba(255, 255, 255, 0.7)', fontSize: '50px' }}\n                >{match.score2}</text>\n\n                {ball &&\n                    <Circle\n                        cx={ball.x.toString()}\n                        cy={ball.y.toString()}\n                        r={ball.width.toString()}\n                        style={{ fill: '#fff' }}\n                    />\n                }\n\n                {player1 &&\n                    <Rect\n                        x={player1.x.toString()}\n                        y={player1.y.toString()}\n                        width={player1.width.toString()}\n                        height={player1.height.toString()}\n                        style={{ fill: 'rgb(255, 255, 255)' }}\n                    />\n                }\n\n                {player2 &&\n                    <Rect\n                        x={player2.x.toString()}\n                        y={player2.y.toString()}\n                        width={player2.width.toString()}\n                        height={player2.height.toString()}\n                        style={{ fill: 'rgb(255, 255, 255)' }}\n                    />\n                }\n            </SVG>\n\n            {message &&\n                <div className='game-message'>\n                    <h4>{message}</h4>\n                    <button onClick={leaveRoom}>Voltar</button>\n                </div>\n            }\n\n        </div>\n    );\n};\n\nexport default Game;\n","import React from 'react';\nimport { login } from '../contexts/GameContext';\nimport { useState } from 'react';\n\nexport const Login = () => {\n  const [name, setName] = useState('');\n\n  const onLogin = (e) => {\n    e.preventDefault();\n    login(name);\n  };\n\n  return (\n    <main>\n      <h1>Seja um Programador - Pong</h1>\n      <section>\n        <form onSubmit={onLogin}>\n          <div className='input-group'>\n            <label>Nome:</label>\n            <input\n              placeholder='Informe o nome para entrar no jogo'\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n            />\n          </div>\n          <button>Entrar</button>\n        </form>\n      </section>\n    </main>\n  );\n};\n","import React, { useContext } from 'react';\nimport PlayerList from './PlayerList';\nimport Chat from './Chat';\nimport { GameContext, sendMessage } from '../contexts/GameContext';\nimport Rooms from './Rooms';\nimport Game from './Game';\nimport { Login } from './Login';\n\nconst Pong = () => {\n  const { isConnected, player, players, messages, match } = useContext(\n    GameContext\n  );\n\n  if (!isConnected) {\n    return <div>Desconectado, conectando...</div>;\n  }\n\n  if (Object.keys(player).length === 0) {\n    return <Login />;\n  }\n\n  console.log(match.status);\n\n  if (match.status) {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <Game />\n        <pre>\n          <code>{JSON.stringify(match, null, 2)}</code>\n        </pre>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row' }}>\n      <div className='list-container'>\n        <Rooms />\n        <PlayerList players={players} />\n      </div>\n      <Chat sendMessage={sendMessage} messages={messages} />\n    </div>\n  );\n};\n\nexport default Pong;\n","import React from 'react';\nimport './App.css';\nimport Pong from './components/Pong';\nimport { GameProvider } from './contexts/GameContext';\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <GameProvider>\n        <Pong />\n      </GameProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}